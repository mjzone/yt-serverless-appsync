# Books table
booksTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "bookId"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "bookId"
        KeyType: "HASH"
    Tags:
      - Key: Environment
        Value: ${self:provider.stage}
      - Key: Name
        Value: books-table

# Orders table
ordersTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "userId"
        AttributeType: "S"
      - AttributeName: "orderId"
        AttributeType: "S"
      - AttributeName: "bookId"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "userId"
        KeyType: "HASH"
      - AttributeName: "orderId"
        KeyType: "RANGE"
    GlobalSecondaryIndexes:
      - IndexName: "byOrder"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        Projection:
          ProjectionType: ALL
      - IndexName: "byBook"
        KeySchema:
          - AttributeName: "bookId"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
    Tags:
      - Key: Environment
        Value: ${self:provider.stage}
      - Key: Name
        Value: orders-table

# Cognito user pool
cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UserPoolName: "BookStoreUserPool-${self:provider.stage}"
    UsernameAttributes:
      - email
    Schema:
      - AttributeDataType: String
        Mutable: true
        Name: name
        Required: false

# Cognito user pool client
cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: Web
    UserPoolId: !Ref cognitoUserPool
    ExplicitAuthFlows: 
      - ALLOW_USER_SRP_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH

# Cognito Admin group
cognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Admin users of the bookstore"
    GroupName: "Admin"
    RoleArn: !GetAtt cognitoAdminGroupIAMRole.Arn
    Precedence: 0
    UserPoolId: !Ref cognitoUserPool

# Cognito Customer group
cognitoCustomerGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Customers of the bookstore"
    GroupName: "Customer"
    RoleArn: !GetAtt cognitoCustomerGroupIAMRole.Arn
    Precedence: 1
    UserPoolId: !Ref cognitoUserPool

# Cognito Admin group IAM role
cognitoAdminGroupIAMRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: "bookstore-admin-group-role"
    Description: "IAM role that admin group users assume in the bookstore application"
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Policies:
      - PolicyName: "bookstore-admin-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt booksTable.Arn
                - !GetAtt ordersTable.Arn

# Cognit User group IAM role
cognitoCustomerGroupIAMRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: "bookstore-customer-group-role"
    Description: "IAM role that customer group users assume in the bookstore application"
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Policies:
      - PolicyName: "bookstore-customer-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            # Read only access to books table
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:BatchGetItem"
                - "dynamodb:Query"
              Resource:
                - !GetAtt booksTable.Arn
            # Full access to OWN records in the order table
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt ordersTable.Arn
              Condition:
                ForAllValues:StringEquals:
                  dynamodb:LeadingKeys: # "${cognito-identity.amazonaws.com:sub}" DOES NOT work as it conflicts with serverless variable reference '$'
                    - !Join ["", ["$", "{cognito-identity.amazonaws.com:sub}"]]